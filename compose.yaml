version: '3.8'

services:
  pg:
    container_name: qrcodes_pg_container
    image: postgres:14.1-alpine3.15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_DB: qrcodes_db
      PGUSER: postgres
    ports:
      - "5432:5432"
    volumes:
      - "${PWD}/data/initdb/:/docker-entrypoint-initdb.d/"
      - "postgres_data:/var/lib/postgresql/data"
  pgadmin:
    container_name: qrcodes_pgadmin_container
    image: dpage/pgadmin4:6.4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_LISTEN_PORT: 5433
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED: "False"
    ports:
      - "5433:5433"
    depends_on:
      - pg
      
  flask-app:
    container_name: qrcodes_flask_container
    build: .
    ports:
      - 8000:8000
    depends_on:
      - pg
    volumes:
      - .:/app
networks:
    default:
        name: qrcodes_net
#volume for persisting data
volumes:
  postgres_data:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

